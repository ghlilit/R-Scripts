model2 <- lm(price~.-sqft_living-sqft_lot15-sqft_living15, data = Train)
summary(model2)
predictModel<-predict(model1, newdata = Test)
df$grade <- relevel(df$grade, ref = 12)
model3 <- lm(price~.-sqft_living-sqft_lot15-sqft_living15, data = Train)
summary(model3)
#As the reference group for the grade variable is now the highest, the coefficients all become negative. The overall performance (R squared) does not change, but now all the groups are significant.
df$grade <- relevel(df$grade, ref = 1)
predictModel<-predict(model1, newdata = Test)
predictModel<-predict(model1, newdata = Test)
predictModel<-predict(model2, newdata = Test)
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$floors <- as.factor(df$floors)
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$grade <- as.factor(df$grade)
max(df$bedrooms)
maxBed <- df[which.max(df$bedrooms), ]
maxBed
maxBed$sqft_living > mean(df$sqft_living)
#The house has one floor, 1.75 bathrooms, below average living space. I am going to assume that it was supposed to have 3 bedrooms instead of 33
df[which.max(df$bedrooms),"bedrooms"] <- 3
model1 <- lm(price~., data = Train)
set.seed(1)
sample <- sample(nrow(df), floor(nrow(df)) * 0.8)
Train <- df[sample,]
Test <- df[-sample,]
model1 <- lm(price~., data = Train)
summary(model1)
#R-squared adjusted compensates for the additional new variables. We should take the R-squared adjusted in this case as we have many variables.
predictModel<-predict(model2, newdata = Test)
cor(df[, c(5:7, 13:16, 20:21)], df[, c(5:7, 13:16, 20:21)]) > 0.7
#The highly correlated variables were
#1.sqft_living and sqft_above
#2.sqft_living and bathrooms
#3.sqft_living and sqft_living15
#4.sqft_lot and sqft_lot15
#5.sqft_living15 and sqft_above
cor(df$price, df[, c(5:7, 13:16, 20:21)])
#We can either remove sqft_above and bathrooms or only sqft_living
summary(lm(price~.-sqft_above-bathrooms, data = df))
summary(lm(price~.-sqft_living, data = df))
#With the sqft_living removed, the R square is higher. Cases 4 and 5 remain.
cor(df$price, df$sqft_lot)
cor(df$price, df$sqft_lot15)
cor(df$price, df$sqft_living15)
cor(df$price, df$sqft_above)
#Based on the correlations, I will remove sqft_lot15 and sqft_living15.
model2 <- lm(price~.-sqft_living-sqft_lot15-sqft_living15, data = Train)
summary(model2)
model3 <- lm(price~.-sqft_living-sqft_lot15-sqft_living15, data = Train)
predictModel<-predict(model2, newdata = Test)
model3 <- lm(price~.-sqft_living-sqft_lot15-sqft_living15, data = Train)
df$grade <- relevel(df$grade, ref = 12)
df$grade <- relevel(df$grade, ref = 1)
predictModel<-predict(model2, newdata = Test)
levels(Test$grade)
levels(Train$grade)
predictModel<-predict(model1, newdata = Test)
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$floors <- as.factor(df$floors)
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$grade <- as.factor(df$grade)
max(df$bedrooms)
maxBed <- df[which.max(df$bedrooms), ]
maxBed
maxBed$sqft_living > mean(df$sqft_living)
#The house has one floor, 1.75 bathrooms, below average living space. I am going to assume that it was supposed to have 3 bedrooms instead of 33
df[which.max(df$bedrooms),"bedrooms"] <- 3
set.seed(1)
sample <- sample(nrow(df), floor(nrow(df)) * 0.8)
Train <- df[sample,]
Test <- df[-sample,]
model1 <- lm(price~., data = Train)
summary(model1)
#R-squared adjusted compensates for the additional new variables. We should take the R-squared adjusted in this case as we have many variables.
predictModel<-predict(model1, newdata = Test)
predictModel<-predict(model1, newdata = Test[, -grade])
predictModel<-predict(model1, newdata = Test[, -"grade"])
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(dplyr)
library(tidyr)
library(ggplot2)
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$floors <- as.factor(df$floors)
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$grade <- as.factor(df$grade)
max(df$bedrooms)
maxBed <- df[which.max(df$bedrooms), ]
maxBed
maxBed$sqft_living > mean(df$sqft_living)
#The house has one floor, 1.75 bathrooms, below average living space. I am going to assume that it was supposed to have 3 bedrooms instead of 33
df[which.max(df$bedrooms),"bedrooms"] <- 3
set.seed(1)
sample <- sample(nrow(df), floor(nrow(df)) * 0.8)
Train <- df[sample,]
Test <- df[-sample,]
model1 <- lm(price~., data = Train)
summary(model1)
#R-squared adjusted compensates for the additional new variables. We should take the R-squared adjusted in this case as we have many variables.
predictModel<-predict(model1, newdata = Test)
levels(grade)
levels(df$grade)
levels(df$grade)
levels(Test$grade)
levels(Train$grade)
levels(df$grade)
levels(Test$grade)
levels(Train$grade)
predictModel<-predict(model1, newdata = Test)
levels(df$grade)
levels(Test$grade)
levels(Train$grade)
model$xlevels$grade <- union(model$xlevels$grade, levels(test$grade))
levels(df$grade)
levels(Test$grade)
levels(Train$grade)
model$xlevels$grade <- union(model1$xlevels$grade, levels(test$grade))
levels(df$grade)
levels(Test$grade)
levels(Train$grade)
model$xlevels$grade <- union(model1$xlevels$grade, levels(Test$grade))
levels(df$grade)
levels(Test$grade)
levels(Train$grade)
model1$xlevels$grade <- union(model1$xlevels$grade, levels(Test$grade))
predictModel<-predict(model1, newdata = Test)
RMSE1<-sqrt(mean((predictModel-Test$price)^2))
RMSE1
levels(df$grade)
levels(Test$grade)
levels(Train$grade)
model1$xlevels$grade <- union(model1$xlevels$grade, levels(Test$grade))
predictModel<-predict(model1, newdata = Test)
RMSE1<-sqrt(mean((predictModel-Test$price)^2))
RMSE1
predictModel<-predict(model2, newdata = Test)
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(dplyr)
library(tidyr)
library(ggplot2)
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$floors <- as.factor(df$floors)
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$grade <- as.factor(df$grade)
max(df$bedrooms)
maxBed <- df[which.max(df$bedrooms), ]
maxBed
maxBed$sqft_living > mean(df$sqft_living)
#The house has one floor, 1.75 bathrooms, below average living space. I am going to assume that it was supposed to have 3 bedrooms instead of 33
df[which.max(df$bedrooms),"bedrooms"] <- 3
df$age = 2018 - df$yr_built
ggplot(aes(age, price), data = df) + geom_point()
cor(df$age, df$price)
#There seems to be no significant relationship between the age and the price
cor(df$price, df[, c(5:7, 13:16, 20:21)])
cor(df$bedrooms, df$sqft_living)
cor(df$sqft_living, df$bathrooms)
cor(df$bedrooms, df$bathrooms)
cor(df$sqft_living, df$sqft_above)
ggplot(df, aes(waterfront, price)) + geom_boxplot()
ggplot(df, aes(view, price)) + geom_boxplot()
ggplot(df, aes(condition, price)) + geom_boxplot()
ggplot(df, aes(grade, price)) + geom_boxplot()
plt <- ggplot(df, aes(bedrooms, price)) + geom_point(na.rm = TRUE)
plt + facet_wrap(~grade, ncol = 4)
plt <- ggplot(df, aes(sqft_living, price)) + geom_point(na.rm = TRUE)
plt + facet_wrap(~view, ncol = 2)
plt <- ggplot(df, aes(sqft_living, price)) + geom_point(na.rm = TRUE)
plt + facet_wrap(~condition, ncol = 2)
set.seed(1)
sample <- sample(nrow(df), floor(nrow(df)) * 0.8)
Train <- df[sample,]
Test <- df[-sample,]
model1 <- lm(price~., data = Train)
summary(model1)
#R-squared adjusted compensates for the additional new variables. We should take the R-squared adjusted in this case as we have many variables.
cor(df[, c(5:7, 13:16, 20:21)], df[, c(5:7, 13:16, 20:21)]) > 0.7
#The highly correlated variables were
#1.sqft_living and sqft_above
#2.sqft_living and bathrooms
#3.sqft_living and sqft_living15
#4.sqft_lot and sqft_lot15
#5.sqft_living15 and sqft_above
cor(df$price, df[, c(5:7, 13:16, 20:21)])
#We can either remove sqft_above and bathrooms or only sqft_living
summary(lm(price~.-sqft_above-bathrooms, data = df))
summary(lm(price~.-sqft_living, data = df))
#With the sqft_living removed, the R square is higher. Cases 4 and 5 remain.
cor(df$price, df$sqft_lot)
cor(df$price, df$sqft_lot15)
cor(df$price, df$sqft_living15)
cor(df$price, df$sqft_above)
#Based on the correlations, I will remove sqft_lot15 and sqft_living15.
model2 <- lm(price~.-sqft_living-sqft_lot15-sqft_living15, data = Train)
summary(model2)
df$grade <- relevel(df$grade, ref = 12)
model3 <- lm(price~.-sqft_living-sqft_lot15-sqft_living15, data = Train)
summary(model3)
#As the reference group for the grade variable is now the highest, the coefficients all become negative. The overall performance (R squared) does not change, but now all the groups are significant.
df$grade <- relevel(df$grade, ref = 1)
levels(df$grade)
levels(Test$grade)
levels(Train$grade)
model1$xlevels$grade <- union(model1$xlevels$grade, levels(Test$grade))
predictModel<-predict(model1, newdata = Test)
RMSE1<-sqrt(mean((predictModel-Test$price)^2))
RMSE1
predictModel<-predict(model2, newdata = Test)
model1$xlevels$grade <- union(model1$xlevels$grade, levels(Test$grade))
model2$xlevels$grade <- union(model2$xlevels$grade, levels(Test$grade))
model3$xlevels$grade <- union(model3$xlevels$grade, levels(Test$grade))
predictModel<-predict(model1, newdata = Test)
RMSE1<-sqrt(mean((predictModel-Test$price)^2))
RMSE1
predictModel<-predict(model2, newdata = Test)
RMSE2<-sqrt(mean((predictModel-Test$price)^2))
RMSE2
predictModel<-predict(model3, newdata = Test)
RMSE3<-sqrt(mean((predictModel-Test$price)^2))
RMSE3
model1$xlevels$grade <- union(model1$xlevels$grade, levels(Test$grade))
model2$xlevels$grade <- union(model2$xlevels$grade, levels(Test$grade))
model3$xlevels$grade <- union(model3$xlevels$grade, levels(Test$grade))
predictModel<-predict(model1, newdata = Test)
RMSE1<-sqrt(mean((predictModel-Test$price)^2))
RMSE1
predictModel<-predict(model2, newdata = Test)
RMSE2<-sqrt(mean((predictModel-Test$price)^2))
RMSE2
predictModel<-predict(model3, newdata = Test)
RMSE3<-sqrt(mean((predictModel-Test$price)^2))
RMSE3
model2 <- lm(price~.-sqft_living, data = Train)
summary(model2)
model1$xlevels$grade <- union(model1$xlevels$grade, levels(Test$grade))
model2$xlevels$grade <- union(model2$xlevels$grade, levels(Test$grade))
model3$xlevels$grade <- union(model3$xlevels$grade, levels(Test$grade))
predictModel<-predict(model1, newdata = Test)
RMSE1<-sqrt(mean((predictModel-Test$price)^2))
RMSE1
predictModel<-predict(model2, newdata = Test)
RMSE2<-sqrt(mean((predictModel-Test$price)^2))
RMSE2
predictModel<-predict(model3, newdata = Test)
RMSE3<-sqrt(mean((predictModel-Test$price)^2))
RMSE3
cor(df[, c(5:7, 13:16, 20:21)], df[, c(5:7, 13:16, 20:21)]) > 0.7
#The highly correlated variables were
#1.sqft_living and sqft_above
#2.sqft_living and bathrooms
#3.sqft_living and sqft_living15
cor(df$price, df[, c(5:7, 13:16, 20:21)])
summary(lm(price~.-sqft_above-bathrooms, data = df))
summary(lm(price~.-sqft_living, data = df))
#With the sqft_living removed, the R square is higher.
cor(df$price, df$sqft_lot)
cor(df$price, df$sqft_lot15)
cor(df$price, df$sqft_living15)
cor(df$price, df$sqft_above)
model2 <- lm(price~.-sqft_living, data = Train)
summary(model2)
model1$xlevels$grade <- union(model1$xlevels$grade, levels(Test$grade))
model2$xlevels$grade <- union(model2$xlevels$grade, levels(Test$grade))
model3$xlevels$grade <- union(model3$xlevels$grade, levels(Test$grade))
predictModel<-predict(model1, newdata = Test)
RMSE1<-sqrt(mean((predictModel-Test$price)^2))
RMSE1
predictModel<-predict(model2, newdata = Test)
RMSE2<-sqrt(mean((predictModel-Test$price)^2))
RMSE2
predictModel<-predict(model3, newdata = Test)
RMSE3<-sqrt(mean((predictModel-Test$price)^2))
RMSE3
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(dplyr)
library(tidyr)
library(ggplot2)
df <- read.csv("housing.csv")
str(df)
summary(df$grade)
unique(df$grade)
df$grade <- as.factor(df$grade)
unique(df$grade)
df$grade <- cut(df$grade, breaks = 12, labels = c(1:12))
df <- read.csv("housing.csv")
df$grade <- cut(df$grade, breaks = 12, labels = c(1:12))
unique(df$grade)
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$grade <- cut(df$grade, breaks = 12, labels = c(1:12))
df$age <- 2018 - df$yr_built
ggplot(aes(age, price), data = df) + geom_point()
cor(df$age, df$price)
#To avoid multicolinearity, I am going to delete the yr_built column.
df<-subset(df, select = -c(yr_built))
cor(df$age, df$price)
t.test(df$age, df$price)
df$age <- 2018 - df$yr_built
df$age <- 2018 - df$yr_built
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$grade <- cut(df$grade, breaks = 12, labels = c(1:12))
df$age <- 2018 - df$yr_built
ggplot(aes(age, price), data = df) + geom_point()
#The plot does not show any clear relationship.
t.test(df$age, df$price)
#The p value is smaller than 0.05, so the relationship is significant.
#To avoid multicolinearity, I am going to delete the yr_built column.
df<-subset(df, select = -c(yr_built))
cor(df$price, df[, c(4:7, 13:16, 19:21)])
ggplot(aes(df$bedrooms, df$sqft_living), data = df)+geom_point()
cor(df$bedrooms, df$sqft_living)
ggplot(aes(df$bathrooms, df$sqft_living), data = df)+geom_point()
cor(df$sqft_living, df$bathrooms)
ggplot(aes(df$bathrooms, df$bedrooms), data = df)+geom_point()
cor(df$bedrooms, df$bathrooms)
ggplot(aes(df$sqft_above, df$sqft_living), data = df)+geom_point()
cor(df$sqft_living, df$sqft_above)
set.seed(1)
sample <- sample(nrow(df), floor(nrow(df)) * 0.8)
Train <- df[sample,]
Test <- df[-sample,]
model1 <- lm(price~., data = Train)
summary(model1)
#R-squared adjusted compensates for the additional new variables. We should take the R-squared adjusted in this case as we have many variables.
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$zipcode <- as.factor(df$zipcode)
df$grade <- cut(df$grade, breaks = 12, labels = c(1:12))
df$age <- 2018 - df$yr_built
ggplot(aes(age, price), data = df) + geom_point()
#The plot does not show any clear relationship.
t.test(df$age, df$price)
#The p value is smaller than 0.05, so the relationship is significant.
#To avoid multicolinearity, I am going to delete the yr_built column.
df<-subset(df, select = -c(yr_built))
model1 <- lm(price~., data = Train)
summary(model1)
#R-squared adjusted compensates for the additional new variables. We should take the R-squared adjusted in this case as we have many variables.
cor(df[, c(5:7, 13:16, 20:21)], df[, c(5:7, 13:16, 20:21)]) > 0.7
cor(df[, c(5:7, 13:15, 20:21)], df[, c(5:7, 13:16, 20:21)]) > 0.7
cor(df[, c(5:7, 13:15, 20:21)], df[, c(5:7, 13:15, 20:21)]) > 0.7
#The highly correlated variables were
#1.sqft_living and sqft_above
#2.sqft_living and bathrooms
#3.sqft_living and sqft_living15
#4.sqft_lot and sqft_lot15
cor(df$price, df[, c(5:7, 13:15, 20:21)])
#Sqft_living is just sqft_above+sqft_basement and gives no additional information. Sqft_lot is not significant, so it is omitted from the fourth pair. Id is also not significant.
model2 <- lm(price~.-sqft_living-sqft_lot15-id, data = Train)
summary(model2)
t.test(df$price , df$sqft_lot)
t.test(df$sqft_lot)
t.test(df$sqft_lot15)
t.test(df$price, df$sqft_lot15)
t.test(df$price, df$sqft_lot)
cor(df[, c(5:7, 13:15, 20:21)], df[, c(5:7, 13:15, 20:21)]) > 0.7
#The highly correlated variables were
#1.sqft_living and sqft_above
#2.sqft_living and bathrooms
#3.sqft_living and sqft_living15
#4.sqft_lot and sqft_lot15
cor(df$price, df[, c(5:7, 13:15, 20:21)])
#Sqft_living is just sqft_above+sqft_basement and gives no additional information. Sqft_lot15 concerns the neighbors,so it is more logical to omit it, instead of omitting the land of the house itself. Id is not significant.
model2 <- lm(price~.-sqft_living-sqft_lot15-id, data = Train)
summary(model2)
df$grade <- relevel(df$grade, ref = 12)
model3 <- lm(price~.-sqft_living-sqft_lot15-id, data = Train)
summary(model3)
#As the reference group for the grade variable is now the highest, the coefficients all become negative. The overall performance (R squared and R squared adjusted) does not change, but now all the groups are significant.
df$grade <- relevel(df$grade, ref = 1)
predictModel<-predict(model1, newdata = Test)
set.seed(18)
sample <- sample(nrow(df), floor(nrow(df)) * 0.8)
Train <- df[sample,]
Test <- df[-sample,]
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(dplyr)
library(tidyr)
library(ggplot2)
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$zipcode <- as.factor(df$zipcode)
df$grade <- cut(df$grade, breaks = 12, labels = c(1:12))
df$age <- 2018 - df$yr_built
ggplot(aes(age, price), data = df) + geom_point()
#The plot does not show any clear relationship.
t.test(df$age, df$price)
#The p value is smaller than 0.05, so the relationship is significant.
#To avoid multicolinearity, I am going to delete the yr_built column.
df<-subset(df, select = -c(yr_built))
cor(df$price, df[, c(4:7, 13:16, 19:21)])
predictModel<-predict(model1, newdata = Test)
predictModel<-predict(model1, newdata = Test)
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(dplyr)
library(tidyr)
library(ggplot2)
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$zipcode <- as.factor(df$zipcode)
df$grade <- cut(df$grade, breaks = 12, labels = c(1:12))
df$age <- 2018 - df$yr_built
ggplot(aes(age, price), data = df) + geom_point()
#The plot does not show any clear relationship.
t.test(df$age, df$price)
#The p value is smaller than 0.05, so the relationship is significant.
#To avoid multicolinearity, I am going to delete the yr_built column.
df<-subset(df, select = -c(yr_built))
cor(df$price, df[, c(4:7, 13:15, 19:21)])
set.seed(18)
sample <- sample(nrow(df), floor(nrow(df)) * 0.8)
Train <- df[sample,]
Test <- df[-sample,]
model1 <- lm(price~., data = Train)
summary(model1)
#R-squared adjusted compensates for the additional new variables. We should take the R-squared adjusted in this case as we have many variables.
cor(df[, c(5:7, 13:15, 20:21)], df[, c(5:7, 13:15, 20:21)]) > 0.7
#The highly correlated variables were
#1.sqft_living and sqft_above
#2.sqft_living and bathrooms
#3.sqft_living and sqft_living15
#4.sqft_lot and sqft_lot15
cor(df$price, df[, c(5:7, 13:15, 20:21)])
#Sqft_living is just sqft_above+sqft_basement and gives no additional information. Sqft_lot15 concerns the neighbors,so it is more logical to omit it, instead of omitting the land of the house itself. Id is not significant.
model2 <- lm(price~.-sqft_living-sqft_lot15-id, data = Train)
summary(model2)
df$grade <- relevel(df$grade, ref = 12)
model3 <- lm(price~.-sqft_living-sqft_lot15-id, data = Train)
summary(model3)
#As the reference group for the grade variable is now the highest, the coefficients all become negative. The overall performance (R squared and R squared adjusted) does not change, but now all the groups are significant.
df$grade <- relevel(df$grade, ref = 1)
predictModel<-predict(model1, newdata = Test)
RMSE1<-sqrt(mean((predictModel-Test$price)^2))
RMSE1
model2 <- lm(price~.-sqft_lot-sqft_lot15, data = Train)
predictModel<-predict(model2, newdata = Test)
RMSE2<-sqrt(mean((predictModel-Test$price)^2))
RMSE2
predictModel<-predict(model3, newdata = Test)
RMSE3<-sqrt(mean((predictModel-Test$price)^2))
RMSE3
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(dplyr)
library(tidyr)
library(ggplot2)
sd(df$price)
df <- read.csv("housing.csv")
str(df)
df <- df %>% separate(date, "date", sep = "T000000")
df$date <- as.Date(df$date, "%Y%m%d")
df$price <- df$price/1000
df$waterfront  <- as.factor(df$waterfront)
df$view <- as.factor(df$view)
df$condition <- as.factor(df$condition)
df$zipcode <- as.factor(df$zipcode)
df$grade <- cut(df$grade, breaks = 12, labels = c(1:12))
sd(df$price)
