#The lowest two nodes, first left, then right
gini1 <- 1 - (0.86**2) - (0.14**2)
gini2 <- 1 - (0.13**2) - (0.87**2)
entropy1 <- -(0.86 * log(0.86, base = 2) + (0.14) * log(0.14, base = 2))
entropy2 <- -(0.13 * log(0.13, base = 2) + (0.87) * log(0.87, base = 2))
asRules(model)
model2 <- glm(Churn~., data = train, family = "binomial")
exp(coefficients(model2))
exp <- exp( 0.000270914 + 260 * 1.006407436 + 150 * 1.006407436 + 10 * 1.634380567 +
+ 20 * 1.100580603 + 20 * 1.049239385 )
prob <- exp/(1+exp)
prob
exp <- exp( 0.000270914 + 260 * 1.006407436 + 150 * 1.006407436 + 10 * 1.634380567 +
+ 20 * 1.100580603 + 20 * 1.049239385 )
prob <- exp/(1+exp)
prob
exp <- exp(0.000270914 + 260 * 1.006407436 + 150 * 1.006407436 + 10 * 1.634380567 +
+ 20 * 1.100580603 + 20 * 1.049239385 + 20 * 1.000436339 )
prob <- exp/(1+exp)
prob
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(caret)
library(rattle)
library(ROCR)
df <- read.csv("Cust_churn.csv")
View(df)
df$Churn <- as.factor(df$Churn)
df$Call.Plan <- as.factor(df$Call.Plan)
df$Message.Plan <- as.factor(df$Message.Plan)
ggplot(aes(Churn, Account.Length), data = df) + geom_boxplot()
ggplot(aes(Churn, Intern..Min), data = df) + geom_boxplot()
prop.table(table(df$CallCenter.enquiry, df$Churn),1)
prop.table(table(df$Call.Plan, df$Churn),1)
prop.table(table(df$Message.Plan, df$Churn),1)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='red',size=2)
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(ggplot2)
library(rpart)
library(dplyr)
library(rpart.plot)
library(caret)
library(rattle)
library(ROCR)
df %>% summarize(mean(Eve.Mins))
df %>% summarize(mean(Eve.Mins)) %>% group_by(Churn)
df %>% summarize(mean(Eve.Mins)) %>% group_by(df$Churn)
df %>% group_by(Churn) %>% summarize(mean(Eve.Mins))
df %>% group_by(Churn) %>% summarize(mean(Day.Mins))
df %>% group_by(Churn) %>% summarize(mean(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 15)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='red',size=2)
df %>% group_by(Churn) %>% summarize(mean(Day.Mins))
df %>% group_by(Churn) %>% summarize(mean(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='red',size=2)
df %>% group_by(Churn) %>% summarize(median(Day.Mins))
df %>% group_by(Churn) %>% summarize(median(Eve.Mins))
medD <- df %>% group_by(Churn) %>% summarize(median(Day.Mins))
medE <- df %>% group_by(Churn) %>% summarize(median(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='red',size=2)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='red',size=0.5)
medD <- df %>% group_by(Churn) %>% summarize(median(Day.Mins))
medE <- df %>% group_by(Churn) %>% summarize(median(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='red',size=0.5) +
geom_vline(aes(xintercept =15),col='blue',size=0.5)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='red',size=0.5) +
geom_vline(aes(xintercept =15),col='blue',size=0.5)
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='red',size=0.5) +
geom_vline(aes(xintercept =15),col='dodgerblue',size=0.5)
medD <- df %>% group_by(Churn) %>% summarize(median(Day.Mins))
medE <- df %>% group_by(Churn) %>% summarize(median(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='frebrick1',size=0.5) +
geom_vline(aes(xintercept =15),col='dodgerblue',size=0.5)
medD <- df %>% group_by(Churn) %>% summarize(median(Day.Mins))
medE <- df %>% group_by(Churn) %>% summarize(median(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept =15),col='dodgerblue',size=0.5)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept =10),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept =15),col='dodgerblue',size=0.5)
View(df)
View(medD)
medD[1,1]
medD[1,2]
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medD[1,2]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medD[2,2]),col='dodgerblue',size=0.5)
ttype(medD[1,2])
type(medD[1,2])
class(medD[1,2])
class(medD[[1,2]])
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medD[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medD[[2,2]]),col='dodgerblue',size=0.5)
medD <- df %>% group_by(Churn) %>% summarize(median(Day.Mins))
medE <- df %>% group_by(Churn) %>% summarize(median(Eve.Mins))
class(medD[[1,2]])
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medD[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medD[[2,2]]),col='dodgerblue',size=0.5)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medE[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medE[[2,2]]),col='dodgerblue',size=0.5)
medD <- df %>% group_by(Churn) %>% summarize(mean(Day.Mins))
medE <- df %>% group_by(Churn) %>% summarize(mean(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medD[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medD[[2,2]]),col='dodgerblue',size=0.5)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medE[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medE[[2,2]]),col='dodgerblue',size=0.5)
model <- rpart(Churn~., train)
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(ggplot2)
library(rpart)
library(dplyr)
library(rpart.plot)
library(caret)
library(rattle)
library(ROCR)
df <- read.csv("Cust_churn.csv")
df$Churn <- as.factor(df$Churn)
df$Call.Plan <- as.factor(df$Call.Plan)
df$Message.Plan <- as.factor(df$Message.Plan)
ggplot(aes(Churn, Account.Length), data = df) + geom_boxplot()
ggplot(aes(Churn, Intern..Min), data = df) + geom_boxplot()
prop.table(table(df$CallCenter.enquiry, df$Churn),1)
prop.table(table(df$Call.Plan, df$Churn),1)
prop.table(table(df$Message.Plan, df$Churn),1)
ggplot(aes(Churn, CallCenter.enquiry), data = df) + geom_boxplot()
ggplot(aes(Churn, Day.Mins), data = df) + geom_boxplot()
medD <- df %>% group_by(Churn) %>% summarize(mean(Day.Mins))
medE <- df %>% group_by(Churn) %>% summarize(mean(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medD[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medD[[2,2]]),col='dodgerblue',size=0.5)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medE[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medE[[2,2]]),col='dodgerblue',size=0.5)
df$Total.Mins <- df$Day.Mins + df$Eve.Mins + df$Night.Mins
ggplot(aes(Call.Plan, Total.Mins), data = df) + geom_boxplot()
ggplot(aes(Churn, Total.Mins), data = df) + geom_boxplot()
df<-subset(df, select = -c(Total.Mins))
plt<-ggplot(df, aes(x=Message.Plan, fill=Churn)) + geom_bar( position = "fill")
plt
set.seed(1)
index <- createDataPartition(df$Churn, p = 0.8, list = F)
train <- df[index, ]
test <- df[-index, ]
model <- rpart(Churn~., train)
prp(model, type = 2, extra = 1)
prp(model, type = 2, extra = 4)
asRules(model)
model2 <- glm(Churn~., data = train, family = "binomial")
exp(coefficients(model2))
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(ggplot2)
library(caret)
library(ROCR)
library(digest)
df <- read.csv("Attrition2.csv")
levels = c(1,2,3,4)
lab = c("low", "medium", "high", "very high")
df$EnvironmentSatisfaction <- factor(df$EnvironmentSatisfaction, levels, lab)
df$JobLevel <- as.factor(df$JobLevel)
df$StockOptionLevel <- as.factor(df$StockOptionLevel)
summary(df)
counts <- addmargins(table(df$Attrition, df$OverTime))
prob <- 100/336
plt<-ggplot(df, aes(x=OverTime, fill=Attrition)) + geom_bar(position = "fill")
plt
plt<-ggplot(df, aes(x=EnvironmentSatisfaction, fill=Attrition)) + geom_bar( position = "fill")
plt
ggplot(aes(Attrition, DailyRate), data = df) + geom_boxplot()
trainIndex <- createDataPartition(df$Attrition, p = 0.8, list = F)
Train <- df[trainIndex, ]
Test <- df[-trainIndex, ]
model <- glm(formula = Attrition~., family = "binomial", data = df)
summary(model)
coefficients(model)
exp(coefficients(model))
exp <- exp( 0.4671273806 + 356 * -0.0005003621 -0.9994465651 -0.9915872518
+ 1.5397193377 -1.3302965045 + 3* -0.0269146527 + 2* -0.0849912996)
prob <- exp/(1+exp)
prob
model2 <- glm(formula = Attrition~.-TotalWorkingYears, family = "binomial", data = df)
summary(model2)
pr <- predict(model, newdata = Test, type = "response")
pr1 <- factor(ifelse(pr > 0.5, "Yes", "No"))
confusionMatrix(data = pr1, Test$Attrition, positive = "Yes")
Accuracy1 <- (195 + 11)/235
Sensitivity1 <- 11/38
Specificity1 <- 195/197
PPV1 <- 11/13
NPV1 <- 195/(195+27)
pr2 <- predict(model2, newdata = Test, type = "response")
pr2 <- factor(ifelse(pr2 > 0.5, "Yes", "No"))
confusionMatrix(data = pr2, Test$Attrition, positive = "Yes")
Accuracy2 <- (195 + 10)/235
Sensitivity2 <- 10/38
Specificity2 <- 195/197
PPV2 <- 10/12
NPV2 <- 195/(195+28)
pr2 <- predict(model2, newdata = Test, type = "response")
pr2 <- factor(ifelse(pr2 > 0.7, "Yes", "No"))
confusionMatrix(data = pr2, Test$Attrition, positive = "Yes")
pr <- predict(model, newdata = Test, type = "response")
pred1 <- prediction(pr, Test$Attrition)
perf = performance(pred1, "tpr", "fpr")
plot(perf, colorize = TRUE)
pr2 <- predict(model2, newdata = Test, type = "response")
pred2 <- prediction(pr2, Test$Attrition)
perf = performance(pred2, "tpr", "fpr")
plot(perf, colorize = TRUE)
auc <- performance(pred1, "auc")@y.values
auc
auc2 <- performance(pred2, "auc")@y.values
auc2
coefficients(model2)
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(ggplot2)
library(rpart)
library(dplyr)
library(rpart.plot)
library(caret)
library(rattle)
library(ROCR)
df <- read.csv("Cust_churn.csv")
df$Churn <- as.factor(df$Churn)
df$Call.Plan <- as.factor(df$Call.Plan)
df$Message.Plan <- as.factor(df$Message.Plan)
ggplot(aes(Churn, Account.Length), data = df) + geom_boxplot()
ggplot(aes(Churn, Intern..Min), data = df) + geom_boxplot()
prop.table(table(df$CallCenter.enquiry, df$Churn),1)
prop.table(table(df$Call.Plan, df$Churn),1)
prop.table(table(df$Message.Plan, df$Churn),1)
ggplot(aes(Churn, CallCenter.enquiry), data = df) + geom_boxplot()
ggplot(aes(Churn, Day.Mins), data = df) + geom_boxplot()
medD <- df %>% group_by(Churn) %>% summarize(mean(Day.Mins))
medE <- df %>% group_by(Churn) %>% summarize(mean(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medD[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medD[[2,2]]),col='dodgerblue',size=0.5)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medE[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medE[[2,2]]),col='dodgerblue',size=0.5)
df$Total.Mins <- df$Day.Mins + df$Eve.Mins + df$Night.Mins
ggplot(aes(Call.Plan, Total.Mins), data = df) + geom_boxplot()
ggplot(aes(Churn, Total.Mins), data = df) + geom_boxplot()
df<-subset(df, select = -c(Total.Mins))
plt<-ggplot(df, aes(x=Message.Plan, fill=Churn)) + geom_bar( position = "fill")
plt
set.seed(1)
index <- createDataPartition(df$Churn, p = 0.8, list = F)
train <- df[index, ]
test <- df[-index, ]
model <- rpart(Churn~., train)
prp(model, type = 2, extra = 1)
prp(model, type = 2, extra = 4)
#The lowest two nodes, first left, then right
gini1 <- 1 - (0.86**2) - (0.14**2)
gini2 <- 1 - (0.13**2) - (0.87**2)
entropy1 <- -(0.86 * log(0.86, base = 2) + (0.14) * log(0.14, base = 2))
entropy2 <- -(0.13 * log(0.13, base = 2) + (0.87) * log(0.87, base = 2))
asRules(model)
model2 <- glm(Churn~., data = train, family = "binomial")
exp(coefficients(model2))
coefficients(model2)
exp <- exp(0.000270914 + 260 * 1.006407436 + 150 * 1.006407436 + 10 * 1.634380567 +
+ 20 * 1.100580603 + 20 * 1.049239385 + 20 * 1.000436339)
prob <- exp/(1+exp)
prob
coefficients(model2)
exp <- exp(-8.2137089676 + 260 * 0.0123030656 + 150 * 0.0063869952 + 10 * 0.4912638747 +
+ 20 * 0.0958378615 + 20 * 0.0480655065 + 20 * 0.0004362439)
prob <- exp/(1+exp)
prob
coefficients(model2)
exp <- exp(-8.2137089676 + 260 * 0.0123030656 + 150 * 0.0063869952 + 10 * 0.4912638747
+ 20 * 0.0958378615 + 20 * 0.0480655065 + 20 * 0.0004362439)
prob <- exp/(1+exp)
prob
predDT <- predict(model, newdata = test)
predLR <- predict(model2, newdata = test, type = "response")
predDT <- predict(model, newdata = test)
View(predDT)
predLR <- predict(model2, newdata = test)
predLR <- predict(model2, newdata = test, type = response)
predLR <- predict(model2, newdata = test, type = "response")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.5, "Yes", "No"))
predDT <- predict(model, newdata = test , type = "class")
predLR <- factor(ifelse(predLR > 0.5))
predLR <- factor(ifelse(predLR > 0.5, "1", "0"))
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.5, "1", "0"))
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.5, "1", "0"))
confusionMatrix(data = predDT, Test$Churn, positive = "1")
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.5, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.6, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.4, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.5, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
predLR <- predict(model2, newdata = test, type = "class")
predLR <- predict(model2, newdata = test, type = "terms")
predLR <- predict(model2, newdata = test, type = "link")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.5, "1", "0"))
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.5, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.4, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.3, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.2, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.3, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
pred1 <- predict(model, test, type = "response")
pred1 <- predict(model, test, type = "prob")
head(pred1)
summary(pred1)
pred2 <- predict(model, test)
pred2 <- prediction(pred2,test$Churn)
pred2 <- predict(model2, test, type = "response")
pred2 <- prediction(pred2,test$Churn)
perf = performance(pred2, "tpr", "fpr")
plot(perf, colorize = TRUE)
pred1 <- predict(model, test)
pred1 <- prediction(pred1[,2],test$Churn)
perf = performance(pred1, "tpr", "fpr")
plot(perf, colorize = TRUE)
pred2 <- predict(model2, test, type = "response")
pred2 <- prediction(pred2,test$Churn)
perf = performance(pred2, "tpr", "fpr")
plot(perf, colorize = TRUE)
auc <- performance(pred1, "auc")@y.values
auc
auc2 <- performance(pred2, "auc")@y.values
auc2
pred1 <- predict(model, test)
pred1 <- prediction(pred1[,2],test$Churn)
perf = performance(pred1, "tpr", "fpr")
plot(perf, colorize = TRUE)
pred2 <- predict(model2, test, type = "response")
pred2 <- prediction(pred2,test$Churn)
perf = performance(pred2, "tpr", "fpr")
plot(perf, colorize = TRUE)
auc <- performance(pred1, "auc")@y.values
auc
auc2 <- performance(pred2, "auc")@y.values
auc2
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
library(ggplot2)
library(rpart)
library(dplyr)
library(rpart.plot)
library(caret)
library(rattle)
library(ROCR)
df <- read.csv("Cust_churn.csv")
df <- read.csv("Cust_churn.csv")
df$Churn <- as.factor(df$Churn)
df$Call.Plan <- as.factor(df$Call.Plan)
df$Message.Plan <- as.factor(df$Message.Plan)
ggplot(aes(Churn, Account.Length), data = df) + geom_boxplot()
ggplot(aes(Churn, Intern..Min), data = df) + geom_boxplot()
prop.table(table(df$CallCenter.enquiry, df$Churn),1)
prop.table(table(df$Call.Plan, df$Churn),1)
prop.table(table(df$Message.Plan, df$Churn),1)
ggplot(aes(Churn, CallCenter.enquiry), data = df) + geom_boxplot()
ggplot(aes(Churn, Day.Mins), data = df) + geom_boxplot()
medD <- df %>% group_by(Churn) %>% summarize(mean(Day.Mins))
medE <- df %>% group_by(Churn) %>% summarize(mean(Eve.Mins))
ggplot(df, aes(x = Day.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medD[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medD[[2,2]]),col='dodgerblue',size=0.5)
ggplot(df, aes(x = Eve.Mins, colour = Churn)) +
geom_freqpoly(binwidth = 20) + geom_vline(aes(xintercept = medE[[1,2]]),col='firebrick1',size=0.5) +
geom_vline(aes(xintercept = medE[[2,2]]),col='dodgerblue',size=0.5)
df$Total.Mins <- df$Day.Mins + df$Eve.Mins + df$Night.Mins
ggplot(aes(Call.Plan, Total.Mins), data = df) + geom_boxplot()
ggplot(aes(Churn, Total.Mins), data = df) + geom_boxplot()
df<-subset(df, select = -c(Total.Mins))
plt<-ggplot(df, aes(x=Message.Plan, fill=Churn)) + geom_bar( position = "fill")
plt
set.seed(1)
index <- createDataPartition(df$Churn, p = 0.8, list = F)
train <- df[index, ]
test <- df[-index, ]
model <- rpart(Churn~., train)
prp(model, type = 2, extra = 1)
prp(model, type = 2, extra = 4)
#DayMins=260, EveMins=150, Call.center.Enq=10, does not have message and call plans, have not made any international calls and messages and the account length is 20. Looking at the decision rules, what is the probability that a customer may churn?
model <- rpart(Churn~., train)
prp(model, type = 2, extra = 1)
prp(model, type = 2, extra = 4)
#The lowest two nodes, first left, then right
gini1 <- 1 - (0.86**2) - (0.14**2)
gini2 <- 1 - (0.13**2) - (0.87**2)
entropy1 <- -(0.86 * log(0.86, base = 2) + (0.14) * log(0.14, base = 2))
entropy2 <- -(0.13 * log(0.13, base = 2) + (0.87) * log(0.87, base = 2))
print(gini1, gini2, entropy1, entropy2)
gini1, gini2, entropy1, entropy2
#The lowest two nodes, first left, then right
gini1 <- 1 - (0.86**2) - (0.14**2)
gini2 <- 1 - (0.13**2) - (0.87**2)
entropy1 <- -(0.86 * log(0.86, base = 2) + (0.14) * log(0.14, base = 2))
entropy2 <- -(0.13 * log(0.13, base = 2) + (0.87) * log(0.87, base = 2))
"The first node has gini" + gini1 + "and entropy" + entropy1
"The first node has gini" + string(gini1) + "and entropy" + string(entropy1)
"The first node has gini" + str(gini1) + "and entropy" + str(entropy1)
"The first node has gini" %+% gini1 %+% "and entropy" %+% entropy1
"The first node has gini" %+% gini1 %+% "and entropy" %+% entropy1
"The second node has gini" + gini2 + "and entropy" + entropy2
"The first node has gini" %+% gini1 %+% "and entropy" %+% entropy1
"The second node has gini" %+% gini2 %+% "and entropy" %+% entropy2
"The first node has gini" %+% gini1 %+% "and entropy" %+% entropy1
k
k <- "The first node has gini" %+% gini1 %+% "and entropy" %+% entropy1
k
k
#The lowest two nodes, first left, then right
gini1 <- 1 - (0.86**2) - (0.14**2)
gini1
gini2 <- 1 - (0.13**2) - (0.87**2)
gini2
entropy1 <- -(0.86 * log(0.86, base = 2) + (0.14) * log(0.14, base = 2))
entrop1
#The lowest two nodes, first left, then right
gini1 <- 1 - (0.86**2) - (0.14**2)
gini1
gini2 <- 1 - (0.13**2) - (0.87**2)
gini2
entropy1 <- -(0.86 * log(0.86, base = 2) + (0.14) * log(0.14, base = 2))
entropy1
entropy2 <- -(0.13 * log(0.13, base = 2) + (0.87) * log(0.87, base = 2))
entropy2
asRules(model)
model2 <- glm(Churn~., data = train, family = "binomial")
exp(coefficients(model2))
coefficients(model2)
exp <- exp(-8.2137089676 + 260 * 0.0123030656 + 150 * 0.0063869952 + 10 * 0.4912638747
+ 20 * 0.0958378615 + 20 * 0.0480655065 + 20 * 0.0004362439)
prob <- exp/(1+exp)
prob
predDT <- predict(model, newdata = test , type = "class")
predLR <- predict(model2, newdata = test, type = "response")
predLR <- factor(ifelse(predLR > 0.3, "1", "0"))
confusionMatrix(data = predDT, test$Churn, positive = "1")
confusionMatrix(data = predLR, test$Churn, positive = "1")
pred1 <- predict(model, test)
pred1 <- prediction(pred1[,2],test$Churn)
perf = performance(pred1, "tpr", "fpr")
plot(perf, colorize = TRUE)
pred2 <- predict(model2, test, type = "response")
pred2 <- prediction(pred2,test$Churn)
perf = performance(pred2, "tpr", "fpr")
plot(perf, colorize = TRUE)
auc <- performance(pred1, "auc")@y.values
auc
auc2 <- performance(pred2, "auc")@y.values
auc2
